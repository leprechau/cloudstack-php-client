{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Plepl√© <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
{% if requiredParamLength > 0 or optionalParamLength > 0 or api.isCacheable %}
    /**
     * {{ api.requestClassname }} Constructor
     *
{%  if requiredParamLength > 0 %}{% for param in requiredParams %}
     * @param {{ param.PHPTypeTagValue }} ${{ param.name }} {{ param.description|raw|ucfirst }}
{% endfor %}{% endif %}{% if optionalParamLength > 0 %}
     * @param array $optArgs {
{% for param in optionalParams %}{# document all optional paramaters #}
     *     @type {{ param.PHPTypeTagValue }} ${{ param.name }} {{ param.description|raw|ucfirst }}
{% endfor %}{# end optional arguments #}
     * }
{% endif %}{% if api.isCacheable %}
     * @param bool $useCachedResponse Whether to allow the use of a previously cached response for this specific request
     * @param bool $enableResponseCaching Whether to allow the response from this specific request to be cached for later use
     * @param int $cacheTTL Time in seconds to cache response, if allowed
{% endif %}
     */
    public function __construct ({% for param in requiredParams %}{{ loop.index0 > 0 ? ', ' : '' }}{% if 'array' == param.phpType %}array {% endif %}${{ param.name }}{% endfor %}
{# end required #}
{# append optional arguments if needed #}
{% if optionalParamLength > 0 %}{% if requiredParamLength > 0 %}, {% endif %}array $optArgs = []{% endif %}
{% if api.isCacheable %}{% if requiredParamLength > 0 or optionalParamLength > 0 %}, {% endif %}bool $useCachedResponse = {{ env.cache.isCommandEnabled(api.name) ? 'true' : 'false' }}, bool $enableResponseCaching = {{ env.cache.isCommandEnabled(api.name) ? 'true' : 'false' }}, int $cacheTTL = {{ env.cache.commandTTL(api.name) }}{% endif %})
    {
{% for param in requiredParams %}
        $this->set{{ param.name|capitalize }}(${{ param.name }});
{% endfor %}{% if 0 != optionalParamLength %}
        foreach($optArgs as $k => $v) {
            $this->{'set'.ucfirst($k)}($v);
        }
{% endif %}{% if api.isCacheable %}
        $this->cachedResponseAllowed = $useCachedResponse;
        $this->responseCachingEnabled = $enableResponseCaching;
        $this->responseCacheTTL = $cacheTTL;
{% endif %}
    }
{% endif %}

    /**
     * @param array $data
     * @return {{ namespace_path('CloudStackRequest\\' ~ api.requestClassname, true) }}
     */
    public static function fromArray(array $data = []): {{ api.requestClassName }}
    {
{% if requiredParamLength == 0 and optionalParamLength == 0 %}
        return new static;
{% elseif 0 == requiredParamLength %}{# this object only contains optional parameters #}
        return new static($data);
{% else %}{% for param in requiredParams %}
        if (isset($data['{{ param.name }}'])) {
            ${{ param.name }} = $data['{{ param.name }}'];
            unset($data['{{ param.name }}']);
        } else {
            throw new \DomainException('{{ api.requestClassname }}::fromArray - Required parameter "{{ param.name }}" not found in $data.');
        }

{% endfor %}
        $n = new static({% for param in requiredParams %}{{ loop.index0 > 0 ? ',' : '' }}
            ${{ param.name }}{% endfor %}{% if optionalParamLength > 0 %}{% if requiredParamLength > 0 %},
{% endif %}
            $data{% endif %}

        );

        return $n;
{% endif %}
    }
