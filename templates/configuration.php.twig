{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
<?php{{ namespace_stmt() }}

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ now('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use Psr\Log\LoggerAwareInterface;
use Psr\Log\LoggerAwareTrait;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;

/**
 * Class CloudStackConfiguration
 */
class CloudStackConfiguration implements LoggerAwareInterface {

    use LoggerAwareTrait;

    /** @var string */
    protected $apiKey = '';
    /** @var string */
    protected $secretKey = '';
    /** @var string  */
    protected $scheme = 'http';
    /** @var string */
    protected $host = '';
    /** @var int */
    protected $port = 8080;

    /** @var string */
    protected $pathPrefix = 'client';
    /** @var string */
    protected $apiPath = 'api';
    /** @var string */
    protected $consolePath = 'console';

    /** @var string */
    protected $compiledAddress = '';

    /** @var \GuzzleHttp\ClientInterface */
    protected $httpClient = null;

    /**
     * CloudStackConfiguration constructor.
     *
     * @param array $config
     * @param \Psr\Log\LoggerInterface|null $logger
     */
    public function __construct(array $config = [], LoggerInterface $logger = null) {
        if (null === $logger) {
            $this->logger = new NullLogger();
        } else {
            $this->logger = $logger;
        }

        if (isset($config['endpoint'])) {
            throw new \InvalidArgumentException('The "endpoint" configuration parameter is deprecated, please use the component url params');
        }

        foreach($config as $k => $v) {
            if (false === strpos($k, '_')) {
                $this->{'set'.ucfirst($k)}($v);
            } else {
                $this->{'set'.implode('', array_map('ucfirst', explode('_', $k)))}($v);
            }
        }

        if ('' === $this->host) {
            throw new \RuntimeException(ENDPOINT_EMPTY_MSG, ENDPOINT_EMPTY);
        }

        if ('' === $this->apiKey) {
            throw new \RuntimeException(APIKEY_EMPTY_MSG, APIKEY_EMPTY);
        }

        if ('' === $this->secretKey) {
            throw new \RuntimeException(SECRETKEY_EMPTY_MSG, SECRETKEY_EMPTY);
        }

        if (!isset($this->httpClient) || !($this->httpClient instanceof ClientInterface)) {
            $this->httpClient = new Client();
        }
    }

    /**
     * @return string
     */
    public function getApiKey(): string {
        return $this->apiKey;
    }

    /**
     * @param string $apiKey
     * @return CloudStackConfiguration
     */
    public function setApiKey(string $apiKey): CloudStackConfiguration {
        $this->apiKey = $apiKey;
        return $this;
    }

    /**
     * @return string
     */
    public function getSecretKey(): string {
        return $this->secretKey;
    }

    /**
     * @param string $secretKey
     * @return CloudStackConfiguration
     */
    public function setSecretKey(string $secretKey): CloudStackConfiguration {
        $this->secretKey = $secretKey;
        return $this;
    }

    /**
     * @return string
     */
    public function getScheme(): string {
        return $this->scheme;
    }

    /**
     * @param string $scheme
     * @return CloudStackConfiguration
     */
    public function setScheme(string $scheme): CloudStackConfiguration {
        $this->scheme = $scheme;
        $this->compiledAddress = '';
        return $this;
    }

    /**
     * @return string
     */
    public function getHost(): string {
        return $this->host;
    }

    /**
     * @param string $host
     * @return CloudStackConfiguration
     */
    public function setHost(string $host): CloudStackConfiguration {
        $this->host = $host;
        $this->compiledAddress = '';
        return $this;
    }

    /**
     * @return int
     */
    public function getPort(): int {
        return $this->port;
    }

    /**
     * @param int $port
     * @return CloudStackConfiguration
     */
    public function setPort(int $port): CloudStackConfiguration {
        $port = intval($port);
        if (0 === $port) {
            $this->port = null;
        } else {
            $this->port = $port;
        }

        $this->compiledAddress = '';

        return $this;
    }

    /**
     * @return string
     */
    public function getPathPrefix(): string {
        return $this->pathPrefix;
    }

    /**
     * @param string $pathPrefix
     * @return CloudStackConfiguration
     */
    public function setPathPrefix(string $pathPrefix): CloudStackConfiguration {
        $this->pathPrefix = trim($pathPrefix, " \t\n\r\0\x0B/");
        $this->compiledAddress = '';
        return $this;
    }

    /**
     * @return string
     */
    public function getApiPath(): string {
        return $this->apiPath;
    }

    /**
     * @var string $apiPath;
     * @return CloudStackConfiguration
     */
    public function setApiPath(string $apiPath): CloudStackConfiguration {
        $this->apiPath = trim($apiPath, " \t\n\r\0\x0B/");
        return $this;
    }

    /**
     * @return string
     */
    public function getConsolePath(): string {
        return $this->consolePath;
    }

    /**
     * @param string $consolePath
     * @return CloudStackConfiguration
     */
    public function setConsolePath(string $consolePath): CloudStackConfiguration {
        $this->consolePath = trim($consolePath, " \t\n\r\0\x0B/");
        return $this;
    }

    /**
     * @return string
     */
    public function getCompiledAddress(): string {
        if ('' === $this->compiledAddress) {
            $this->compiledAddress = rtrim(sprintf(
                '%s://%s%s/%s',
                $this->getScheme(),
                $this->getHost(),
                0 === $this->port ? '' : sprintf(':%d', $this->port),
                $this->getPathPrefix()
            ), "/");
        }

        return $this->compiledAddress;
    }

    /**
     * @param string $query
     * @return string
     * @throws \Exception
     */
    public function buildSignature(string $query): string {
        if ('' === $query) {
            throw new \Exception(STRTOSIGN_EMPTY_MSG, STRTOSIGN_EMPTY);
        }

        $hash = @hash_hmac('SHA1', strtolower($query), $this->getSecretKey(), true);
        return urlencode(base64_encode($hash));
    }

    /**
     * @return \GuzzleHttp\ClientInterface
     */
    public function getHttpClient() {
        return $this->httpClient;
    }

    /**
     * @param \GuzzleHttp\ClientInterface $httpClient
     * @return CloudStackConfiguration
     */
    public function setHttpClient(ClientInterface $httpClient) {
        $this->httpClient = $httpClient;
        return $this;
    }

    /**
     * @return \Psr\Log\LoggerInterface|\Psr\Log\NullLogger
     */
    public function getLogger() {
        return $this->logger;
    }
}

