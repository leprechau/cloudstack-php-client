{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
<?php{{ namespace_stmt('CloudStackResponse\\Types') }}

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ now('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Class DateType
 * @package {{ namespace_path('Types', true) }}
 */
class DateType extends \DateTime implements \JsonSerializable {

    const FORMAT_OLD = 'Y-m-d';
    const FORMAT_NEW = 'Y-m-d\TH:m:s';
    const FORMAT_NEW_TZ = \DateTime::ISO8601;

    /**
     * This allows you to specify a custom format other than the three default CloudStack formats above.
     *
     * @var string
     */
    public static $customFormat = '';

    /** @var string */
    private $rawValue;

    /**
     * Attempts to create a DateTime object from input, returning the raw value if unable.
     *
     * @param string $in
     * @return DateType|string
     */
    public static function fromApiDate($in) {

        // Loop through possible formats
        foreach([static::$customFormat, self::FORMAT_NEW_TZ, self::FORMAT_NEW, self::FORMAT_OLD] as $format) {

            // if empty, skip
            if ('' === $format) {
                continue;
            }

            // try to create DateTime object
            $d = static::createFromFormat($format, $in);
            if ($d) {
                $date = new DateType();
                $date->setTimestamp($d->getTimeStamp());
                $date->setTimezone($d->getTimezone());
                // Store the raw date input
                $date->rawValue = $in;

                return $date;
            }
        }

        // return input if not able
        return $in;
    }

    /**
     * Returns whatever input was given.
     *
     * @return string
     */
    public function __toString() {
        return $this->rawValue;
    }

    /**
     * Returns whatever input was given
     *
     * @return string
     */
    public function jsonSerialize() {
        return $this->rawValue;
    }
}
