{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Plepl√© <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
<?php declare(strict_types=1);

{{ namespace_stmt('CloudStackResponse\\Types') }}

{{ file_header(capabilities) }}

/**
 * Class DateType
 * @package {{ namespace_path('Types', true) }}
 */
class DateType extends \DateTime implements \JsonSerializable
{
    const FORMAT_OLD = 'Y-m-d';
    const FORMAT_NEW = 'Y-m-d\TH:m:s';
    const FORMAT_NEW_TZ = \DateTime::ISO8601;

    private const FORMATS = [self::FORMAT_NEW_TZ, self::FORMAT_NEW, self::FORMAT_OLD];

    /**
     * This allows you to specify a custom format other than the three default CloudStack formats above.
     *
     * @var string
     */
    public static $customFormat = '';

    /** @var string */
    private $rawValue;

    /**
     * @param string $format
     * @param string $in
     * @return null|{{ namespace_path('Types\\DateType', true) }}
     */
    private static function _tryBuildDate(string $format, string $in): ?DateType {
        try {
            if (false !== ($d = static::createFromFormat($format, $in))) {
                $date = new DateType();
                $date->setTimestamp($d->getTimeStamp());
                $date->setTimezone($d->getTimezone());
                // Store the raw date input
                $date->rawValue = $in;
                return $date;
            }
        } catch (\Exception $e) {
            // TODO: do something with this...
        }
        return null;
    }

    /**
     * Attempts to create a DateTime object from input, returning the raw value if unable.
     *
     * @param string $in
     * @return null|{{ namespace_path('Types\\DateType', true) }}
     */
    public static function fromApiDate(string $in)
    {
        if ('' !== static::$customFormat && null !== ($d = self::_tryBuildDate(self::$customFormat, $in))) {
            return $d;
        }
        // Loop through possible formats
        foreach(self::FORMATS as $format) {
            if (null !== ($d = self::_tryBuildDate($format, $in))) {
                return $d;
            }
        }
        // return input if not able
        return $in;
    }

    /**
     * Returns whatever input was given.
     *
     * @return string
     */
    public function __toString()
    {
        return $this->rawValue;
    }

    /**
     * Returns whatever input was given
     *
     * @return string
     */
    public function jsonSerialize()
    {
        return $this->rawValue;
    }
}
