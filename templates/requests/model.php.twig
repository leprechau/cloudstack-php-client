{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}{% spaceless %}
{% set params = api.parameters %}
{% set requiredParams = params.required %}
{% set optionalParams = params.optional %}
{% set requiredParamLength = requiredParams|length %}
{% set optionalParamLength = optionalParams|length %}
{% set hasMapParameter = false %}
{% for param in api.parameters if hasMapParameter == false %}
    {% if param.type == 'map' %}
        {% set hasMapParameter = true %}
    {% endif %}
{% endfor %}
{% endspaceless %}
<?php{{ namespace_stmt('CloudStackRequest') }}

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ now('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

{% if namespace_path() != '' %}{% if api.isAsync and api.eventType != ''%}
use {{ namespace_path('CloudStackEventTypes') }};
{% endif %}{% if hasMapParameter %}
use {{ namespace_path('CloudStackHelpers') }};
{% endif %}{% endif %}

/**
 * Class {{ api.requestClassname }}
{{ api.sinceTag(0) }} * @package {{ namespace_path('CloudStackRequest', true) }}
 * @SWG\Definition(definition="{{ api.requestClassname }}")
 */
class {{ api.requestClassname }} implements CloudStackRequestInterface, CloudStackApiCommandRequest{% if api.isList %}, CloudStackListRequest{% endif %}{% if api.isAsync %}, CloudStackAsynchronousRequest{% else %}, CloudStackSynchronousRequest{% endif %} {

{% if api.isAsync %}
    const EVENT_TYPE = {% if api.eventType == '' %}''{% else %}CloudStackEventTypes::{{ api.eventType }}{% endif %};
{% endif %}
    const API_NAME = '{{ api.name }}';
{% if requiredParamLength > 0 or optionalParamLength > 0 %}

{% for prop in api.parameters %}
{{ prop.propertyDocBloc }}
    private ${{ prop.name }};

{% endfor %}{% endif %}{% if requiredParamLength > 0 or optionalParamLength > 0 %}
    /**
     * {{ api.requestClassname }} Constructor
{% for param in requiredParams %}
     * @param {{ param.PHPTypeTagValue }} ${{ param.name }} {{ param.description|raw|ucfirst }}
{% endfor %}
{% if optionalParamLength > 0 %}
     * @param array $optArgs {
{# document all optional paramaters #}
{% for param in optionalParams %}
     *     @type {{ param.PHPTypeTagValue }} ${{ param.name }} {{ param.description|raw|ucfirst }}
{% endfor %}
{# end optional arguments #}
     * }
{% endif %}
     */
    public function __construct ({% for param in requiredParams %}{{ loop.index0 > 0 ? ', ' : '' }}{% if 'array' == param.phpType %}array {% endif %}${{ param.name }}{% endfor %}
{# end required #}
{# append optional arguments if needed #}
{% if optionalParamLength > 0 %}{% if requiredParamLength > 0 %}, {% endif %}array $optArgs = []{% endif %}) {
{% for param in requiredParams %}
        $this->set{{ param.name|capitalize }}(${{ param.name }});
{% endfor %}{% if 0 != optionalParamLength %}
        foreach($optArgs as $k => $v) {
            $this->{'set'.ucfirst($k)}($v);
        }
{% endif %}
    }
{% endif %}

    /**
     * @param array $data
     * @return {{ namespace_path('CloudStackRequest\\' ~ api.requestClassname, true) }}
     */
    public static function fromArray(array $data) {
{% if requiredParamLength == 0 and optionalParamLength == 0 %}
        return new static;
{% elseif 0 == requiredParamLength %}{# this object only contains optional parameters #}
        return new static($data);
{% else %}{% for param in requiredParams %}
        if (isset($data['{{ param.name }}'])) {
            ${{ param.name }} = $data['{{ param.name }}'];
            unset($data['{{ param.name }}']);
        } else {
            throw new \DomainException('{{ api.requestClassname }}::fromArray - Required parameter "{{ param.name }}" not found in $data.');
        }

{% endfor %}
        $n = new static({% for param in requiredParams %}{{ loop.index0 > 0 ? ',' : '' }}
            ${{ param.name }}{% endfor %}{% if optionalParamLength > 0 %}{% if requiredParamLength > 0 %},
{% endif %}
            $data{% endif %}

        );

        return $n;
{% endif %}
    }

{% for prop in api.parameters %}
    /**
{{ prop.phpdocDescription }}
     * @return {{ prop.phpTypeTagValue }}
     */
    public function get{{ prop.name|capitalize }}() {
        return $this->{{ prop.name }};
    }

    /**
{{ prop.phpdocDescription }}
     * @param {{ prop.phpTypeTagValue }} ${{ prop.name }}
     * @return $this
     */
    public function set{{ prop.name|capitalize }}({% if 'array' == prop.phpType %}array {% endif %}${{ prop.name }}) {
        $this->{{ prop.name }} = ${{ prop.name }};
        return $this;
    }

{% endfor %}
    /**
     * @return string
     */
    public function getCloudStackCommandParameter() {
        return 'command';
    }

    /**
     * @return string
     */
    public function getCloudStackCommandName() {
        return '{{ api.name }}';
    }

    /**
     * @return string
     */
    public function getCloudStackResponseModel() {
        return '{{ api.response.FQName|replace({"\\": "\\\\"}) }}';
    }
{% if api.isAsync %}

    /**
     * @return string
     */
    public function getCloudStackEventType() {
        return self::EVENT_TYPE;
    }
{% endif %}

    /**
     * @return bool
     */
    public function isRequestValid() {
{% if 0 == requiredParamLength %}
        // all parameters are optional
        return true;{% else %}
        return isset($this->{{ requiredParams|keys|join(")\n            && isset($this->") }});{% endif %}

    }

    /**
     * @return array
     */
    public function toUrlParams() {
        $a = [];
{% for param in api.parameters %}
{% if 'map' == param.type %}
        if (isset($this->{{ param.name }}) && is_array($this->{{ param.name }}) && count($this->{{ param.name }}) > 0) {
            foreach(CloudStackHelpers::formatCSQueryArray($this->{{ param.name }}, '{{ param.name }}') as $k => $v) {
                $a[$k] = $v;
            }
        }
{% elseif 'array' == param.phpType %}
        if (isset($this->{{ param.name }})) {
            $a['{{ param.name }}'] = implode(',', $this->{{ param.name }});
        }
{% elseif 'boolean' == param.phpType %}
        if (isset($this->{{ param.name }})) {
            $a['{{ param.name }}'] = $this->{{ param.name }} ? 'true' : 'false';
        }
{% else %}
        if (isset($this->{{ param.name }})) {
            $a['{{ param.name }}'] = (string)$this->{{ param.name }};
        }
{% endif %}
{% endfor %}
        return $a;
    }

    /**
     * @return array
     */
    public function jsonSerialize() {
        $a = [];
{% for param in api.parameters %}
        if (isset($this->{{ param.name }}){% if param.isCollection %} && is_array($this->{{ param.name }}) && count($this->{{ param.name }}) > 0{% endif %}) {
            $a['{{ param.name }}'] = $this->{{ param.name }};
        }
{% endfor %}
        return $a;
    }
}