{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
<?php{{ namespace_stmt() }}

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ now('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;

/**
 * CloudStackClient class
 * @package {{ namespace_path('', true) }}
 */
class CloudStackClient {

    /** @var CloudStackConfiguration */
    protected $configuration;

    /**
     * CloudStackClient constructor
     *
     * @param CloudStackConfiguration $configuration
     */
    public function __construct(CloudStackConfiguration $configuration) {
        $this->configuration = $configuration;
    }

{% for api in apis %}
{% include "method.php.twig" with {'api' : api, 'config' : config} %}

{% endfor %}

    /**
     * @param string $vmId
     * @return {{ namespace_path('CloudStackResponse\\AccessVmConsoleProxyResponse', true) }}
     */
    public function accessVmConsoleProxy($vmId) {
        $response = $this->doRequest(new CloudStackRequest\AccessVmConsoleProxyRequest($vmId), false);

        $body = $response->getBody();

        $model = new CloudStackResponse\AccessVmConsoleProxyResponse();
        $data = '';
        while (!$body->eof() && $b = $body->read(8192)) {
            $data .= $b;
        }

        $model->iframe = $data;

        return $model;
    }

    /**
     * Will wait until either $tries threshold is met or async job completes, successful or otherwise.
     *
     * @param {{ namespace_path('CloudStackResponse\\AsyncJobStartResponse', true) }} $startResponse
     * @param int $sleep
     * @param int $tries
     * @return {{ namespace_path('CloudStackResponse\\QueryAsyncJobResultResponse', true) }}|null
     * @throws \InvalidArgumentException
     */
    public function waitForAsync(CloudStackResponse\AsyncJobStartResponse $startResponse, $sleep = 2, $tries = 120) {
        // Some basic validation
        if (!is_int($sleep) || 0 >= $sleep) {
            throw new \InvalidArgumentException(sprintf(
                '%s::waitForAsyncResponse - $sleep must be positive integer, %s seen.',
                get_class($this),
                is_int($sleep) ? $sleep : gettype($sleep)
            ));
        }

        if (!is_int($tries) || (-1 > $tries || 0 === $tries)) {
            throw new \InvalidArgumentException(sprintf(
                '%s:waitForAsyncResponse - $tries must be positive integer or -1 for infinite, %s seen.',
                get_class($this),
                is_int($tries) ? $tries : gettype($tries)
            ));
        }

        $attempts = 0;
        while(true) {
            $result = $this->queryAsyncJobResult($startResponse->jobid);

            if (2 === $result->jobstatus || 2 === $result->jobprocstatus) {
                throw new \RuntimeException($result->jobresult['errortext'], $result->jobresult['errorcode']);
            }

            if (0 === $result->jobstatus) {
                if (-1 !== $tries && $attempts > $tries) {
                    return null;
                }
                sleep($sleep);
            } else {
                if (isset($result->jobresult) && is_array($result->jobresult) && 0 < count($result->jobresult)) {
                    $class = $startResponse->getResponseClassName();

                    // check for simple async responses (i.e.: ["success" => true])
                    $first = reset($result->jobresult);

                    if (is_array($first)) {
                        $result->jobresult = new $class($first);
                    } else {
                        $result->jobresult = new $class($result->jobresult);
                    }
                }
                return $result;
            }
        }

        return null;
    }

    /**
     * Execute Request against CloudStack
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }}
     * @param bool $decode
     * @return mixed
     */
    public function doRequest(CloudStackRequest\CloudStackRequestInterface $request, $decode = true) {
        $resp = $this->configuration->getHttpClient()->send($this->createPsr7Request($request), [
            RequestOptions::HTTP_ERRORS => false,
            RequestOptions::DECODE_CONTENT => false,
        ]);

        // Check for 200..
        if (200 !== $resp->getStatusCode()) {
            // attempt to decode response...
            $data = $resp->getBody()->getContents();
            $decoded = @json_decode($data, true);
            if (JSON_ERROR_NONE === json_last_error()) {
                if (1 === count($decoded)) {
                    $decoded = reset($decoded);
                }
                if (isset($decoded['errortext'])) {
                    throw new CloudStackAPIException($decoded);
                }
            }
            throw new \RuntimeException(sprintf('Received non-200 response: %d %s.  Body: %s', $resp->getStatusCode(), $resp->getReasonPhrase(), $data), NO_VALID_JSON_RECEIVED);
        }

        if ($decode) {
            $responseModel = $request->getCloudStackResponseModel();

            $decoded = $this->decodeBody($resp, $request->getCloudStackCommandName());

            if ($request instanceof CloudStackRequest\CloudStackAsynchronousRequest) {
                return new CloudStackResponse\AsyncJobStartResponse($decoded, $responseModel);
            }

            if ($request instanceof CloudStackRequest\CloudStackListRequest) {
                $ret = [];
                if ($decoded) {
                    unset($decoded['count']);
                    foreach(reset($decoded) as $item) {
                        $ret[] = new $responseModel($item);
                    }
                }
                return $ret;
            }
            return new $responseModel($decoded);
        }

        return $resp;
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPsr7Request(CloudStackRequest\CloudStackRequestInterface $request) {
        static $headers = ['Accept' => ['application/json'], 'Content-Type' => ['application/x-www-form-urlencoded']];

        $stream = fopen('php://memory', 'w+');
        fwrite($stream, $this->compileQuery($request));

        if ($request instanceof CloudStackRequest\CloudStackApiCommandRequest) {
            $path = $this->configuration->getApiPath();
        } else if ($request instanceof CloudStackRequest\CloudStackConsoleCommandRequest) {
            $path = $this->configuration->getConsolePath();
        } else {
            throw new \DomainException('Unable to determine if request is an API or Console request. Please implement the appropriate interface.');
        }

        return new Request(
            'POST',
            new Uri(sprintf('%s/%s', $this->configuration->getCompiledAddress(), $path)),
            $headers,
            $stream
        );
    }

    /**
     * @param \Psr\Http\Message\ResponseInterface $resp
     * @param string $command
     * @return array
     * @throws \RuntimeException
     */
    protected function decodeBody(ResponseInterface $resp, $command)
    {
        $body = $resp->getBody();

        if (0 === $body->getSize()) {
            throw new \RuntimeException(NO_DATA_RECEIVED_MSG, NO_DATA_RECEIVED);
        }

        $data = $body->getContents();

        $decoded = @json_decode($data, true);
        if (JSON_ERROR_NONE !== json_last_error()) {
            throw new \RuntimeException(sprintf('%s: %s', NO_VALID_JSON_RECEIVED_MSG, json_last_error_msg()), NO_VALID_JSON_RECEIVED);
        }

        $lowerCmd = strtolower($command);
        $propertyResponse = sprintf('%sresponse', $lowerCmd);

        if (!isset($decoded[$propertyResponse])) {
            /* some commands drop the trailing 's' in the response: listPools becomes 'listpoolresponse' */
            $propertyResponse = sprintf('%sresponse', substr($lowerCmd, 0, -1));
            if (!isset($decoded[$propertyResponse])) {
                throw new \RuntimeException(sprintf(
                    'Unable to parse the response. Got code %d and message: %s',
                    $resp->getStatusCode(),
                    $data
                ));
            }
        }

        $responseData = $decoded[$propertyResponse];

        // treat special cases of list, create and register calls
        if (1 === preg_match('/^(list|create|register|update)/', $lowerCmd, $matches, PREG_OFFSET_CAPTURE))
        {
            $commandPrefix = reset($matches[0]);
            $objectName = substr($lowerCmd, strlen($commandPrefix));
            if (isset($responseData[$objectName])) {
                $resultArray = $responseData[$objectName];
                if (is_array($resultArray)) {
                    return $resultArray;
                }
            } else {
                /* sometimes, the 's' is kept, as in :
                   { "listasyncjobsresponse" : { "asyncjobs" : [ ... ] } } */
                $objectName .= 's';
                if (isset($responseData[$objectName])) {
                    $resultArray = $responseData[$objectName];
                    if (is_array($resultArray)) {
                        return $resultArray;
                    }
                }
            }
        }

        return $responseData;
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @return array
     */
    protected function compileParameters(CloudStackRequest\CloudStackRequestInterface $request) {
        $params = $request->toUrlParams();

        $compiledParams  = [
            'apikey' => $this->configuration->getApiKey(),
            $request->getCloudStackCommandParameter() => $request->getCloudStackCommandName(),
            'response' => 'json',
        ] + $params;

        ksort($compiledParams, SORT_STRING);

        return $compiledParams;
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @return string
     */
    protected function compileQuery(CloudStackRequest\CloudStackRequestInterface $request) {
        $query = http_build_query($this->compileParameters($request));
        $compiledQuery = sprintf(
            '%s&signature=%s',
            $this->encodeQueryForRequest($query),
            $this->configuration->buildSignature($this->encodeQueryForSignature($query))
        );

        return $compiledQuery;
    }

    /**
     * @param string $query
     * @return string
     */
    protected function encodeQueryForRequest($query) {
        static $search = ['+'];
        static $replace = ['%20'];

        return str_replace($search, $replace, $query);
    }

    /**
     * @param string $query
     * @return string
     */
    protected function encodeQueryForSignature($query) {
        static $search = ['+', '%5B', '%5D'];
        static $replace = ['%20', '[', ']'];

        return str_replace($search, $replace, $query);
    }
}
