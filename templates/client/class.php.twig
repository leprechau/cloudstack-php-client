{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Plepl√© <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
<?php

{{ namespace_stmt() }}

{{ file_header(capabilities) }}

use Doctrine\Common\Cache\Cache as CacheProvider;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\Uri as GuzzlePsr7Uri;
use GuzzleHttp\Psr7\Request as GuzzlePsr7Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

// these few imports are explicitly done so i don't have to prefix them everywhere.
// i do not import all request classes because...c'mon now.
use {{ namespace_path('CloudStackRequest\\AccessVmConsoleProxyRequest') }};
use {{ namespace_path('CloudStackRequest\\CloudStackApiCommandRequest') }};
use {{ namespace_path('CloudStackRequest\\CloudStackAsynchronousRequest') }};
use {{ namespace_path('CloudStackRequest\\CloudStackCacheableRequest') }};
use {{ namespace_path('CloudStackRequest\\CloudStackConsoleCommandRequest') }};
use {{ namespace_path('CloudStackRequest\\CloudStackListRequest') }};
use {{ namespace_path('CloudStackRequest\\CloudStackPageableListRequest') }};
use {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface') }};
use {{ namespace_path('CloudStackResponse\\AccessVmConsoleProxyResponse') }};
use {{ namespace_path('CloudStackResponse\\AsyncJobStartResponse') }};
use {{ namespace_path('CloudStackResponse\\QueryAsyncJobResultResponse') }};

/**
 * CloudStackClient class
 * @package {{ namespace_path('', true) }}
 */
class CloudStackClient
{
    const DEFAULT_ASYNC_POLL_INTERVAL = 2;   // number of seconds to wait between poll attempts
    const DEFAULT_ASYNC_RETRY_LIMIT   = 120; // number of polls to execute before stopping

    // options applied to each request
    protected const GUZZLE_REQUEST_OPTS = [
        RequestOptions::HTTP_ERRORS    => false,
        RequestOptions::DECODE_CONTENT => false,
    ];

    // headers applied to each request
    protected const HTTP_REQUEST_HEADERS = [
        'Accept'       => ['application/json'],
        'Content-Type' => ['application/x-www-form-urlencoded'],
    ];

    // search & replace values to be used prior to sending request
    protected const ENCODE_QUERY_REQUEST_SEARCH  = ['+'];
    protected const ENCODE_QUERY_REQUEST_REPLACE = ['%20'];

    // search & replace values to be used prior to creating signature
    protected const ENCODE_QUERY_SIGNATURE_SEARCH  = ['+', '%5B', '%5D'];
    protected const ENCODE_QUERY_SIGNATURE_REPLACE = ['%20', '[', ']'];

    // these response prefixes need to be handled differently from the rest
    protected const RESPONSE_PREFIX_LIST     = 'list';
    protected const RESPONSE_PREFIX_GET      = 'get';
    protected const RESPONSE_PREFIX_CREATE   = 'create';
    protected const RESPONSE_PREFIX_REGISTER = 'register';
    protected const RESPONSE_PREFIX_UPDATE   = 'update';

    /** @var {{ namespace_path('CloudStackClientConfiguration', true) }} */
    protected $configuration;

    /** @var \Psr\Log\LoggerInterface */
    protected $logger;

    /** @var \Doctrine\Common\Cache\Cache */
    protected $cacheProvider;

    /** @var string */
    private $_cacheKeyPrefix;

    /**
     * CloudStackClient constructor
     * @param {{ namespace_path('CloudStackClientConfiguration', true) }} $configuration
     */
    public function __construct(CloudStackClientConfiguration $configuration)
    {
        $this->configuration = $configuration;
        $this->logger = $configuration->getLogger();
        $this->cacheProvider = $configuration->getCacheProvider();

        // if a cache provider was passed, create and store the cache key prefix
        if (isset($this->cacheProvider)) {
            $this->_cacheKeyPrefix = "{$configuration->getHost()}{$configuration->getApiKey()}{$configuration->getSecretKey()}";
        }
    }

    /**
     * This will construct a new CloudStackClient instance with caching entirely disabled
     * @param {{ namespace_path('CloudStackClientConfiguration', true) }} $configuration
     * @return {{ namespace_path('CloudStackClient', true) }}
     */
    public static function withoutCache(CloudStackClientConfiguration $configuration): CloudStackClient
    {
        $new = new static($configuration);
        $new->cacheProvider = null;
        return $new;
    }

    /**
     * @return bool
     */
    public function cachingEnabled(): bool
    {
        return isset($this->cacheProvider);
    }

    /**
     * @return {{ namespace_path('CloudStackClientConfiguration', true) }}
     */
    public function getCloudStackClientConfiguration(): CloudStackClientConfiguration
    {
        return $this->configuration;
    }

    /**
     * @return \Doctrine\Common\Cache\Cache|null
     */
    public function getCacheProvider(): ?CacheProvider
    {
        return $this->cache ?? null;
    }

{% for api in apis %}
{% include "client/method.php.twig" with {'api' : api, 'config' : config} %}

{% endfor %}

    /**
     * @param string $vmId
     * @return {{ namespace_path('CloudStackResponse\\AccessVmConsoleProxyResponse', true) }}
     */
    public function accessVmConsoleProxy($vmId)
    {
        $response = $this->executeHTTPRequest(new AccessVmConsoleProxyRequest($vmId));
        $model = new AccessVmConsoleProxyResponse();
        $model->vmid = $vmId;
        $model->iframe = $response->getBody()->getContents();
        return $model;
    }

    /**
     * Will wait until either $tries threshold is met or async job completes, successful or otherwise.
     *
     * NOTE: If the poll limit is reached, that does NOT mean the job as stopped! It merely means that you are no longer
     *       waiting around to hear the response.
     *
     * @param {{ namespace_path('CloudStackResponse\\AsyncJobStartResponse', true) }} $startResponse
     * @param int $sleep
     * @param int $tries
     * @return {{ namespace_path('CloudStackResponse\\QueryAsyncJobResultResponse', true) }}|null
     * @throws \InvalidArgumentException
     */
    public function waitForAsync(
        AsyncJobStartResponse $startResponse,
        int $sleep = self::DEFAULT_ASYNC_POLL_INTERVAL,
        int $tries = self::DEFAULT_ASYNC_RETRY_LIMIT): ?QueryAsyncJobResultResponse
    {
        // Some basic validation
        if (0 >= $sleep) {
            throw new \InvalidArgumentException(sprintf(
                '%s::waitForAsyncResponse - $sleep must be positive integer, %s seen.',
                get_class($this),
                $sleep
            ));
        }
        if ((-1 > $tries || 0 === $tries)) {
            throw new \InvalidArgumentException(sprintf(
                '%s:waitForAsyncResponse - $tries must be positive integer or -1 for infinite, %s seen.',
                get_class($this),
                $tries
            ));
        }

        // if they want "unlimited" tries, set value to the biggest possible integer
        if (-1 === $tries) {
            $tries = PHP_INT_MAX;
        }

        // loop until either a response is seen or the try limit is reached
        for ($i = 0; $i < $tries; $i++) {
            $result = $this->queryAsyncJobResult($startResponse->jobid);

            if (0 === $result->jobstatus) {
                sleep($sleep);
                continue;
            }
            // if this is a non-error response, try to unmarshal
            if (2 !== $result->jobstatus && 2 !== $result->jobprocstatus && isset($result->jobresult) && is_array($result->jobresult) && 0 < count($result->jobresult)) {
                $class = $startResponse->getResponseClassName();

                // check for simple async responses (i.e.: ["success" => true])
                $first = reset($result->jobresult);

                // set the unmarshalled type to the "jobresult" field
                if (is_array($first)) {
                    $result->jobresult = new $class($first);
                } else {
                    $result->jobresult = new $class($result->jobresult);
                }
            }
            return $result;
        }

        return null;
    }

    /**
     * Execute Request against CloudStack
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }}
     * @return mixed
     */
    public function doRequest(CloudStackRequestInterface $request)
    {
        // ensure required fields are present
        $request->validateRequest();

        // determine this request's cache-ability

        /** @var string $cacheID */
        /** @var int $cacheMode */
        [$cacheID, $cacheMode] = $this->_determineCacheable($request);

        // if the cache mode allows for checking for and using an existing response cache
        if (0 !== (RESPONSE_CACHE_FETCH & $cacheMode) && ($cached = $this->_tryFetchCachedResponse($cacheID, $request))) {
            return $cached;
        }

        // execute request
        $resp = $this->executeHTTPRequest($request);

        // if anything other than a 200 is seen, handle as error
        if (200 !== $resp->getStatusCode()) {
            $this->handleNon200($request, $resp);
        }

        // first, decode response
        $decoded = $this->decodeBody($request, $resp);

        // if async request, don't test for cache
        if ($request instanceof CloudStackAsynchronousRequest) {
            return new AsyncJobStartResponse($decoded, $request);
        }

        // otherwise, attempt to unmarshall response into response object
        $unmarshalledResponse = $this->unmarshalResponse($request, $decoded);

        // if the specified mode allows persistence and the data is both not null AND not an empty array, attempt
        // to persist to cache
        if (0 !== (RESPONSE_CACHE_PERSIST & $cacheMode) && null !== $unmarshalledResponse && [] !== $unmarshalledResponse) {
            $this->_tryPersistResponseToCache($cacheID, $request, $unmarshalledResponse);
        }

        return $unmarshalledResponse;
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @return \Psr\Http\Message\ResponseInterface
     * @throws {{ namespace_path('CloudStackTransportException', true) }}
     */
    protected function executeHTTPRequest(CloudStackRequestInterface $request): ResponseInterface
    {
        try {
            return $this->configuration->getHttpClient()->send($this->createPsr7Request($request), static::GUZZLE_REQUEST_OPTS);
        } catch (GuzzleException $e) {
            throw new CloudStackTransportException($request, $e);
        }
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @return array
     */
    protected function compileParameters(CloudStackRequestInterface $request): array
    {
        $params = $request->toUrlParams();

        $compiledParams  = [
            'apikey' => $this->configuration->getApiKey(),
            $request->getCloudStackCommandParameter() => $request->getCloudStackCommandName(),
            'response' => 'json',
        ] + $params;

        ksort($compiledParams, SORT_STRING);

        return $compiledParams;
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @return string
     */
    protected function compileQuery(CloudStackRequestInterface $request): string
    {
        $query = http_build_query($this->compileParameters($request));
        return sprintf(
            '%s&signature=%s',
            $this->encodeQueryForRequest($query),
            $this->configuration->buildSignature($this->encodeQueryForSignature($query))
        );
    }

    /**
     * @param string $query
     * @return string
     */
    protected function encodeQueryForRequest(string $query): string
    {
        return str_replace(static::ENCODE_QUERY_REQUEST_SEARCH, static::ENCODE_QUERY_REQUEST_REPLACE, $query);
    }

    /**
     * @param string $query
     * @return string
     */
    protected function encodeQueryForSignature(string $query): string
    {
        return str_replace(static::ENCODE_QUERY_SIGNATURE_SEARCH, static::ENCODE_QUERY_SIGNATURE_REPLACE, $query);
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @return \Psr\Http\Message\RequestInterface
     */
    protected function createPsr7Request(CloudStackRequestInterface $request): RequestInterface
    {
        $stream = fopen('php://memory', 'w+');
        fwrite($stream, $this->compileQuery($request));

        if ($request instanceof CloudStackApiCommandRequest) {
            $path = $this->configuration->getApiPath();
        } else if ($request instanceof CloudStackConsoleCommandRequest) {
            $path = $this->configuration->getConsolePath();
        } else {
            throw new \DomainException('Unable to determine if request is an API or Console request. Please implement the appropriate interface.');
        }

        return new GuzzlePsr7Request(
            'POST',
            new GuzzlePsr7Uri(sprintf('%s/%s', $this->configuration->getCompiledAddress(), $path)),
            static::HTTP_REQUEST_HEADERS,
            $stream
        );
    }

    /**
     * This method is called anytime the API returns a non-200 response
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @param \Psr\Http\Message\ResponseInterface $response
     * @throws {{ namespace_path('CloudStackAPIException', true) }}
     * @throws {{ namespace_path('CloudStackResponseException', true) }}
     */
    protected function handleNon200(CloudStackRequestInterface $request, ResponseInterface $response): void {
        // attempt to decode response...
        $data = $response->getBody()->getContents();

        $decoded = @json_decode($data, true);

        // if no decode error seen, throw exception with decoded body
        if (JSON_ERROR_NONE === json_last_error()) {
            if (1 === count($decoded)) {
                $decoded = reset($decoded);
            }
            if (isset($decoded['errortext'])) {
                throw new CloudStackAPIException($request, $decoded);
            }
        }

        throw new CloudStackResponseException(
            $request,
            sprintf(
                'Unable to json_decode non-200 response: %d %s: %s; Body: %s',
                $response->getStatusCode(),
                $response->getReasonPhrase(),
                json_last_error_msg(),
                $data
            ),
            json_last_error()
        );
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }}
     * @param \Psr\Http\Message\ResponseInterface $response
     * @return array
     * @throws \RuntimeException
     */
    protected function decodeBody(CloudStackRequestInterface $request, ResponseInterface $response): array
    {
        $body = $response->getBody();

        if (0 === $body->getSize()) {
            throw new CloudStackResponseException($request, 'Received empty response body', 500);
        }

        $data = $body->getContents();

        $decoded = @json_decode($data, true);
        if (JSON_ERROR_NONE !== json_last_error()) {
            throw new CloudStackResponseException(
                $request,
                sprintf(
                    'Unable to decode %s response: %d %s: %s; Body: %s',
                    $request->getCloudStackCommandName(),
                    $response->getStatusCode(),
                    $response->getReasonPhrase(),
                    json_last_error_msg(),
                    $data
                ),
                json_last_error()
            );
        }

        $lowerCmd = strtolower($request->getCloudStackCommandName());
        $propertyResponse = "{$lowerCmd}response";

        if (!isset($decoded[$propertyResponse])) {
            // some commands drop the trailing 's' in the response: listPools becomes 'listpoolresponse'
            $propertyResponse = sprintf('%sresponse', substr($lowerCmd, 0, -1));
            if (!isset($decoded[$propertyResponse])) {
                throw new CloudStackResponseException(
                    $request,
                    sprintf(
                        'Expected key "%s" not found in %s response: %d %s; Body: %s',
                        $propertyResponse,
                        $request->getCloudStackCommandName(),
                        $response->getStatusCode(),
                        $response->getReasonPhrase(),
                        $data
                    ),
                    500
                );
            }
        }

        $responseData = $decoded[$propertyResponse];
        $prefix = null;

        // treat special cases of list, create and register calls
        if (0 === strpos($lowerCmd, self::RESPONSE_PREFIX_LIST)) {
            $prefix = self::RESPONSE_PREFIX_LIST;
        } elseif (0 === strpos($lowerCmd, self::RESPONSE_PREFIX_GET)) {
            $prefix = self::RESPONSE_PREFIX_GET;
        } elseif (0 === strpos($lowerCmd, self::RESPONSE_PREFIX_CREATE)) {
            $prefix = self::RESPONSE_PREFIX_CREATE;
        } elseif (0 === strpos($lowerCmd, self::RESPONSE_PREFIX_REGISTER)) {
            $prefix = self::RESPONSE_PREFIX_REGISTER;
        } elseif (0 === strpos($lowerCmd, self::RESPONSE_PREFIX_UPDATE)) {
            $prefix = self::RESPONSE_PREFIX_UPDATE;
        }

        if (null !== $prefix) {
            // search for key like: {"listtemplatesresponse": {"template": [...]}}
            $objectName = substr($lowerCmd, strlen($prefix));
            if (isset($responseData[$objectName])) {
                if (is_array($responseData[$objectName])) {
                    return $responseData[$objectName];
                }
            } else {
                // sometimes the 's' is kept, as in: {"listasyncjobsresponse": {"asyncjobs": [...]}}
                $objectName = "{$objectName}s";
                if (isset($responseData[$objectName]) && is_array($responseData[$objectName])) {
                    return $responseData[$objectName];
                }
            }
        }

        // if we make it this far, return the raw decoded response.
        return $responseData;
    }

    /**
     * This method takes the decoded response data and shoves it into an object or array of objects
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @param null|array $decoded
     * @return {{ namespace_path('CloudStackResponse\\CloudStackResponseInterface', true) }}|{{ namespace_path('CloudStackResponse\\CloudStackResponseInterface', true) }}[]
     */
    protected function unmarshalResponse(CloudStackRequestInterface $request, ?array $decoded)
    {
        $responseModelClass = $request->getCloudStackResponseModel();

        // if the executed request is expected to return an array of objects...
        if ($request instanceof CloudStackListRequest) {
            $unmarshalled = [];
            if (null !== $decoded) {
                $totalCount = (int)($decoded['count'] ?? 0);
                unset($decoded['count']);
                if (0 < count($decoded) && is_array(($data = reset($decoded)))) {
                    if ($request instanceof CloudStackPageableListRequest) {
                        // ... and supports paging.
                        $page = $request->getPage();
                        $pageSize = $request->getPagesize();
                        foreach($data as $item) {
                            $unmarshalled[] = new $responseModelClass($page, $pageSize, $totalCount, $item);
                        }
                    } else {
                        // ... and does not support paging
                        foreach($data as $item) {
                            $unmarshalled[] = new $responseModelClass($totalCount, $item);
                        }
                    }
                }
            }
            return $unmarshalled;
        }

        // otherwise, just return response class with raw decoded data.
        return new $responseModelClass($decoded);
    }

    /**
     * @param {{ namespace_path('CloudStackRequest\\CloudStackCacheableRequest', true) }} $request
     * @return string
     */
    private function _getRequestCacheID(CloudStackCacheableRequest $request): string
    {
        // build prefix
        $id = "{$this->_cacheKeyPrefix}{$request->getCloudStackCommandName()}";

        // add each valued property to the id string to be hashed
        foreach($request->toUrlParams() as $k => $v) {
            if (null !== $v) {
                $id .= "{$k}{$v}";
            }
        }

        // hash and return string as ID
        return {% if env.cache.idPrefix is not null %}'{{ env.cache.idPrefix }}'.{% endif %}sha1($id);
    }

    /**
     * Determine a given requests cache mode and generate ID if enabled
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @return array
     */
    private function _determineCacheable(CloudStackRequestInterface $request): array
    {
        if (isset($this->cacheProvider) &&
            ($request instanceof CloudStackCacheableRequest) &&
            RESPONSE_CACHE_DISABLE !== ($cacheMode = $request->getResponseCacheMode())) {
            return [$this->_getRequestCacheID($request), $cacheMode];
        }
        return ['', RESPONSE_CACHE_DISABLE];
    }

    /**
     * Attempt fetch and then validate a cached response
     * @param string $cacheID
     * @param {{ namespace_path('CloudStackRequest\\CloudStackCacheableRequest', true) }} $request
     * @return null|{{ namespace_path('CloudStackResponse\\CloudStackResponseInterface', true) }}|{{ namespace_path('CloudStackResponse\\CloudStackResponseInterface', true) }}[]
     */
    private function _tryFetchCachedResponse(string $cacheID, CloudStackCacheableRequest $request)
    {
        // test if cached response is present
        if (!$this->cacheProvider->contains($cacheID)) {
{% if env.logging.isDebug %}
            $this->logger->debug(sprintf('Command %s cache with ID %s not found', $request->getCloudStackCommandName(), $cacheID));{% endif %}

            return null;
        }
{% if env.logging.isDebug %}
        $this->logger->debug(sprintf('Command %s cache with ID %s found', $request->getCloudStackCommandName(), $cacheID));{% endif %}

        // attempt to fetch cached response
        $cachedResponse = $this->cacheProvider->fetch($cacheID);
        if (false === $cachedResponse) {
            $this->logger->error(sprintf('Command %s cache with ID %s found, but fetching failed!', $request->getCloudStackCommandName(), $cacheID));
            return null;
        }

        // test for really old objects
        if (!($cachedResponse instanceof CloudStackCachedResponse)) {
            $this->logger->warning(sprintf('Command %s cache with ID %s is stale, will not use', $request->getCloudStackCommandName(), $cacheID));
            return null;
        }

        /** @var {{ namespace_path('CloudStackCachedResponse', true) }} $cachedResponse */

        // test for out of date objects
        if (CloudStackGenerationMeta::ID !== $cachedResponse->getGenerationID()) {
            $this->logger->warning(sprintf(
                'Command %s cache with ID %s has generation ID of %d, but current is %d.  Will not use.',
                $request->getCloudStackCommandName(),
                $cacheID,
                $cachedResponse->getGenerationID(),
                CloudStackGenerationMeta::ID
            ));
            return null;
        }

{% if env.logging.isDebug %}
        $this->logger->debug(sprintf('Command %s cache with ID %s found and is valid', $request->getCloudStackCommandName(), $cacheID));{% endif %}

        // finally, if we get this far, assume sanity and return.
        return $cachedResponse->getResponse();
    }

    /**
     * Attempts to persist a successful response to cache
     * @param string $cacheID
     * @param {{ namespace_path('CloudStackRequest\\CloudStackCacheableRequest', true) }} $request
     * @param {{ namespace_path('CloudStackResponse\\CloudStackResponseInterface', true) }}|{{ namespace_path('CloudStackResponse\\CloudStackResponseInterface', true) }}[] $unmarshalledResponse
     * @return void
     */
    private function _tryPersistResponseToCache(string $cacheID, CloudStackCacheableRequest $request, $unmarshalledResponse): void {
        // determine configured TTL of this request's cache
        $ttl = $request->getResponseCacheTTL();

        // attempt to persist to cache
        if (!$this->cacheProvider->save($cacheID, new CloudStackCachedResponse($unmarshalledResponse), $ttl)) {
            $this->logger->error(sprintf(
                'Unable to store cache for command %s with cache id %s',
                $request->getCloudStackCommandName(),
                $cacheID
            ));
        }{% if env.logging.isDebug %} else {
            $this->logger->debug(sprintf(
                'Command %s cache with id %s saved with ttl %d seconds.',
                $request->getCloudStackCommandName(),
                $cacheID,
                $ttl
            ));
        }{% endif %}

    }
}